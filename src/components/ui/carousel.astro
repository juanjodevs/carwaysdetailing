---
import { Image } from 'astro:assets'

const { images, alt } = Astro.props
---
<div class="carousel flex flex-col">
    <div class="slider relative bg-white p-5 rounded-xl grid items-center h-[450px] overflow-hidden">
        {
            images.map((img, i) => (
                <div class="hidden slide absolute transition-all duration-700">
                    <Image class="object-contain max-h-[200px] md:max-h-[400px]" src={img} width="600" height="600" alt={`${alt} - ${i}`} />
                </div>
            ))
        }
        <div class="prev absolute cursor-pointer left-5 text-white z-10 bg-slate-800 h-10 w-10 pl-3 pt-1 text-2xl rounded-full font-bold">{'<'}</div>
        <div class="next absolute cursor-pointer right-5 text-white z-10 bg-slate-800 h-10 w-10 pl-3 pt-1 text-2xl rounded-full font-bold">{'>'}</div>
    </div>
    <div class="flex flex-row flex-wrap gap-5 mt-5 justify-between md:justify-start">
        {
            images.map((image) => (
                <Image class="thumbnail bg-white p-5 rounded-xl cursor-pointer h-16 w-16 md:h-20 md:w-20" src={image} height="80" width="80" alt={`${alt} thumbail`} />
            ))
        }
    </div>
</div>

<script>
    class Swipper {
        constructor(element, leftCallback, rightCallback){
            this.startX = 0
            this.endX = 0

            element.addEventListener('touchstart', (e) => {
                document.body.style.overflow = 'hidden'
                this.startX = e.touches[0].screenX
                this.endX = e.touches[0].screenX
            })

            element.addEventListener('touchmove', (e) => {
                this.endX = e.touches[0].screenX
            })

            element.addEventListener('touchend', (e) => {
                callbackHanlder()
                document.body.style.overflow = 'scroll'
            })
            
            const callbackHanlder = () => {
                if(this.startX !== this.endX){
                    if(this.startX > this.endX){
                        leftCallback()
                    }else{
                        rightCallback()
                    }
                }
            }
        }
    }    

    const sliders = document.querySelectorAll('.slider')
    
    sliders.forEach((slider) => {
        const slides = slider.querySelectorAll('.slide')           

        slides.forEach((slide, i) => {
            slide.style.transform = `translateX(${i * 100}%)`
            slide.classList.remove('hidden')
        })

        const thumbails = slider.closest('.carousel').querySelectorAll('.thumbnail')

        thumbails.forEach((thumbail, i) => {
            thumbail.addEventListener('click', () => {
                currentSlide = i
                slides.forEach((slide, i) => {
                slide.style.transform = `translateX(${100 * (i - currentSlide)}%)`
            });
            })
        })

        let currentSlide = 0;

        const nextButton = slider.querySelector('.next');
        const prevButton = slider.querySelector('.prev');

        const changeImage = (direction) => {
            if(direction === 'next'){
                if(currentSlide+1 === slides.length){
                    currentSlide = 0
                }else{
                    currentSlide++
                }
            }else{
                if(currentSlide-1 < 0){
                    currentSlide = slides.length-1
                }else{
                    currentSlide--
                }
            }

            slides.forEach((slide, i) => {
                slide.style.transform = `translateX(${100 * (i - currentSlide)}%)`
            });
        }

        const swiper = new Swipper(slider, () => changeImage('next'), () => changeImage('prev'))

        // add event listener and next slide functionality
        nextButton.addEventListener('click', () => {
            changeImage('next')
        });

        prevButton.addEventListener('click', () => {
            changeImage('prev')
        })
    })    
</script>